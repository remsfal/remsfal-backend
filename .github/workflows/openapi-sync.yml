name: "Synchronize OpenAPI Spec"

on:
  workflow_run:
    workflows: ["CD Build"]
    types: [completed]
    branches: [main]

permissions:
  contents: read

env:
  BRANCH_PREFIX: 'remsfal-bot/openapi-sync/'

jobs:
  build-and-sync-openapi:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: "Generate OpenAPI and Synchronize with the Frontend"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build REMSFAL
        uses: ./.github/actions/build-remsfal
        with:
          skip-tests: 'true'
          skip-checkstyle: 'true'

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.REMSFAL_BOT_ID }}
          private-key: ${{ secrets.REMSFAL_BOT_KEY }}
          owner: remsfal
          repositories: remsfal-backend,remsfal-frontend
      - name: Identify merged PR
        id: backend-merge
        uses: ./.github/actions/find-merged-pr
        with:
          token: ${{ steps.generate-token.outputs.token }}
      - name: Select existing PR on target
        id: frontend-selection
        uses: ./.github/actions/select-branch
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch-prefix: ${{ env.BRANCH_PREFIX }}

      - name: Checkout Frontend at existing PR branch
        if: steps.frontend-selection.outputs.pr_branch != ''
        uses: actions/checkout@v4
        with:
          repository: remsfal/remsfal-frontend
          ref: ${{ steps.frontend-selection.outputs.pr_branch }}
          token: ${{ steps.generate-token.outputs.token }}
          path: $GITHUB_WORKSPACE/remsfal-frontend
      - name: Checkout Frontend at main branch
        if: steps.frontend-selection.outputs.pr_branch == ''
        uses: actions/checkout@v4
        with:
          repository: remsfal/remsfal-frontend
          ref: main
          token: ${{ steps.generate-token.outputs.token }}
          path: $GITHUB_WORKSPACE/remsfal-frontend
          fetch-depth: 0
      - name: Create new PR branch
        if: steps.frontend-selection.outputs.pr_branch == ''
        run: |
          cd $GITHUB_WORKSPACE/remsfal-frontend
          git checkout -b ${{ env.BRANCH_PREFIX }}${{ steps.backend-merge.outputs.pr_number }}
          echo "Created branch '${{ env.BRANCH_PREFIX }}${{ steps.backend-merge.outputs.pr_number }}'"

      - name: Copy OpenAPI Specs
        run: |
          cd $GITHUB_WORKSPACE
          ls -a
          cd $GITHUB_WORKSPACE/remsfal-backend
          ls -a
          cd $GITHUB_WORKSPACE/remsfal-frontend
          ls -a
          mkdir -p openapi
          cp remsfal-services/remsfal-chat/target/openapi/* export/
          cp remsfal-services/remsfal-notification/target/openapi/* export/
          cp remsfal-services/remsfal-platform/target/openapi/* export/
          if git diff --quiet; then
            echo "No Changes made to the data model."
            echo "SPEC_CHANGED=false" >> $GITHUB_ENV
          else
            echo "SPEC_CHANGED=true" >> $GITHUB_ENV
          fi
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: List the state of node modules
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: npm ci
      - name: Generate Client
        run: |
          echo "TODO: setup NPM"


      - name: sync remsfal frontend repository
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BRANCH_NAME="sync-OpenAPI-spec/${COMMIT_HASH}"

          git clone https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY%%/*}/remsfal-frontend.git
          cd remsfal-frontend

          mkdir -p frontend/src/helper/api/
          cp -r ../export/* frontend/src/helper/api/
          
          if git diff --quiet; then
            echo "No Changes made to the data model. No pull request will be created."
          else
            git checkout -b $BRANCH_NAME || git checkout $BRANCH_NAME
            git add frontend/src/helper/api/
            git commit -m "Update generated files from source repo"
            git push origin "$BRANCH_NAME"
            git fetch origin main
            gh api repos/:owner/remsfal-frontend/pulls \
              -f base="main" \
              -f head="$BRANCH_NAME" \
              -f title="Sync of OpenAPI Spec" \
              -f body="This PR carries the new OpenAPISpec from remsfal-backend."
          fi
